#!/usr/bin/env node

require('dotenv').config();

const binance = require('node-binance-api');
const AWS = require('aws-sdk');


const DENOMINATOR = process.env.DENOMINATOR || "BTC";
const BINANCE_KEY = process.env.BINANCE_KEY;
const BINANCE_SECRET = process.env.BINANCE_SECRET;

const AWS_REGION = process.env.AWS_REGION;
const AWS_KEY_ID = process.env.AWS_KEY_ID;
const AWS_ACCESS_KEY = process.env.AWS_ACCESS_KEY;

const PHONE_NUMBER = process.env.PHONE_NUMBER;

const DEFAULT_MARGIN = 0.004;

const MARGINS = {
	XRPBTC: 0.004,
	XVGBTC: 0.02
}

const DECIMAL_PLACES = {
  ETHBTC: 6
}

const getDecimalPlaces = ticker =>
  DECIMAL_PLACES[ticker] || 8

const getNewPrice = ({price, symbol, isSell}) => {
  const decimalPlaces = getDecimalPlaces(symbol);
	const newPrice = roundTo(
    price * (1 + (isSell ? 1 : -1) * (MARGINS[symbol] || DEFAULT_MARGIN)), 
    decimalPlaces, 
    isSell ? 'ceil' : 'floor'
  );
	console.log("NEW PRICE!", newPrice);
	return newPrice;
}
	
	

function roundTo(n, digits, type) {
	var negative = false;
	if (digits === undefined) {
			digits = 0;
	}
			if( n < 0) {
			negative = true;
		n = n * -1;
	}
	var multiplicator = Math.pow(10, digits);
	n = parseFloat((n * multiplicator).toFixed(11));
	n = (Math[type](n) / multiplicator).toFixed(digits);
	if( negative ) {    
			n = (n * -1).toFixed(digits);
	}
	return n;
}

const getBalance = ({symbol}) =>
	console.log("GETTING BALANCE FOR ", symbol) ||
	new Promise((resolve, reject) => 
		binance.balance((error, balances) => 
			!!error ? (
				!!error[symbol] ? (
					resolve(parseFloat(error[symbol].available))
				) : (
					reject(error)
				)
			) : (
				console.log("BALANCEs", balances[symbol].available) ||
				resolve(parseFloat(balances[symbol].available))
			)
		)
	)

const extractTargetTickerFromSymbol = symbol =>
  DENOMINATOR
	// symbol.substr(0, 3)

const extractSourceTickerFromSymbol = symbol =>
  symbol.replace(DENOMINATOR, "")
	// symbol.substr(3)

const getSellQuantity = ({balance, quantity}) =>
	roundTo(
		quantity < balance ? (
			parseFloat(quantity)
		) : (
			parseFloat(balance * 0.99)
		),
		0,
		'floor'
	)
  

const getBuyQuantity = ({balance, quantity, price}) =>
	roundTo(
		price * quantity >= balance ? (
			parseFloat(balance * 0.99 / price)
		) : (
			parseFloat(quantity)
		),
		3,
		'floor'
	)
  

const buy = ({price, quantity, symbol}) =>
	console.log("BUY!!!", price, quantity, symbol) ||
	(new Promise((resolve, reject) => 
    getBalance({symbol: extractTargetTickerFromSymbol(symbol)})
      .then(balance =>
        console.log("BUYING", getBuyQuantity({balance, quantity, price}), " at ", price) ||
        binance.buy(symbol, getBuyQuantity({balance, quantity, price}), price, { type:'LIMIT' }, (error, response) => 
          !!error ? reject(error) : (
            resolve(response)
          )
        )
      )
  ))
    .then(err => console.log("RESP", err))
		.catch(err => console.log("ERR", err))

const sell = ({price, quantity, symbol}) =>
	console.log("SELL!!!", price, quantity, symbol) ||
	(new Promise((resolve, reject) => 
    getBalance({symbol: extractSourceTickerFromSymbol(symbol)})
      .then(balance =>
        console.log("SELLING", getSellQuantity({balance, quantity}), " at ", price) || 
        binance.sell(symbol, getSellQuantity({balance, quantity}), price, {type:'LIMIT'}, (error, response) => 
          !!error ? reject(error) : (
            resolve(response)
          )
        )
      )
  ))
    .then(err => console.log("RESP", err))
    .catch(err => console.log("ERR", err))
	

const sendNotification = ({message}) =>
	console.log("MESSAGE", message) ||
	(new AWS.SNS({
	region: AWS_REGION,
	accessKeyId: AWS_KEY_ID,
	secretAccessKey: AWS_ACCESS_KEY
})).publish({
		Message: message,
		MessageStructure: 'string',
		PhoneNumber: PHONE_NUMBER,
		Subject: 'Order Alert'
	})
		.promise()

const handleUpdate = ({ 
  x: executionType, 
  s: symbol, 
  p: price, 
  q: quantity, 
  l: quantityJustFilled,
  S: side, 
  o: orderType, 
  i: orderId, 
  X: orderStatus 
}) =>
  executionType === "TRADE" &&
  orderStatus === 'FILLED' &&
	Promise.all([
    sendNotification({message: executionType + ' ' + symbol + ' ' + side + ' ' + orderType + ' ' + price + ' ' + quantity})
    ,
    side === "BUY" ? ( //// if it was a buy order, create a sell order for <MARGIN> higher
			sell({price: getNewPrice({price: price, symbol: symbol, isSell: true}), quantity: quantity, symbol: symbol})
				.catch(err => console.log("Sell error", err))
		) : side === "SELL" ? ( //// if it was a sell order, create a buy order for <MARGIN> lower
			buy({price: getNewPrice({price: price, symbol: symbol, isSell: false}), quantity: quantity, symbol: symbol})
				.catch(err => console.log("Buy error", err))
		) : (
			Promise.resolve(null)
		)
	])
		.then(console.log)
		.catch(console.log)
		

binance.options({
	'APIKEY': BINANCE_KEY,
	'APISECRET': BINANCE_SECRET
});

AWS.config.update({
	region: AWS_REGION,
	accessKeyId: AWS_KEY_ID,
	secretAccessKey: AWS_ACCESS_KEY
});

console.log("Connecting....")

binance.websockets.userData(() => null, resp => console.log(resp) || handleUpdate(resp));